/*
////////////////////////////////////////////////////////////////////////////////////////
//
//  This file is part of Sandpile Simulator, a cellular automaton for sandpile dynamics.
//  Copyright (C) 2021, 2025 M. Frohne
//
//  Sandpile Simulator is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Affero General Public License as published
//  by the Free Software Foundation, either version 3 of the License,
//  or (at your option) any later version.
//
//  Sandpile Simulator is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//  See the GNU Affero General Public License for more details.
//
//  You should have received a copy of the GNU Affero General Public License
//  along with Sandpile Simulator. If not, see <https://www.gnu.org/licenses/>.
//
////////////////////////////////////////////////////////////////////////////////////////
*/

#ifndef SIMULATIONMANAGER_H
#define SIMULATIONMANAGER_H

#include <memory>
#include <omp.h>
#include <deque>
#include <chrono>
#include <sstream>

#include "aux.h"
#include "logger.h"
#include "sandbox.h"
#include "simulator.h"
#include "momentanalysis.h"
#include "avalanchestatistics.h"

/*!
 * \brief Manages automatic simulation (and also "criticalization") of multiple sandboxes.
 *
 * Provides the function runFullSimulation(), which can be used to run repeated simulations for different sandboxes
 * in order to obtain multiple "measurement" samples of avalanche event statistics for several lattice sizes.
 * These generated results can be used as input for a MomentAnalysis of avalanche statistics to determine
 * "critical exponents" and "observable dimensions" of a sandpile model (see also AvalancheStatistics, SimulationModel).
 *
 * The simulations should be run on prepared "critical" sandboxes, which already are in a stationary state of
 * self-organized criticality. Such critical sandboxes can in principle be generated by makeSandboxesCritical().
 */
class SimulationManager
{
public:
    SimulationManager(std::shared_ptr<Logger> pLogger = nullptr);   ///< Constructor.
    //
    std::shared_ptr<Logger> getLogger();                            ///< Get the logger used for logging.
    //
    /*!
     * \brief Perform repeated simulation runs for different lattice sizes to obtain avalanche observable distribution moment samples.
     */
    void runFullSimulation(const std::vector<std::pair<short, Sandbox>>& pCritSandboxes,
                           short pSandboxDim, Aux::Model pSimModel, std::seed_seq& pSeedSeq,
                           std::map<short, std::vector<AvalancheStatistics::Moments>>& pSamplesPerSize_moments1,
                           std::map<short, std::vector<AvalancheStatistics::Moments>>& pSamplesPerSize_moments2,
                           long long pNumDrives, int pNumSamples, bool pRecordArea = true, bool pRecordLinSize = true,
                           std::vector<std::pair<std::string, int>> pModelParameters = {},
                           int pNumThreads = 0, bool pEnablePlotting = false) const;
    //
    /*!
     * \brief Try to automatically drive sandboxes to state of self-organized criticality. Experimental!
     */
    void makeSandboxesCritical(std::vector<std::pair<short, Sandbox>>& pSandboxes, short pSandboxDim,
                               long long pMinNumDrives, long long pMaxNumDrives, long long pDrivesBunch, double pEpsilon,
                               Aux::Model pSimModel, std::seed_seq& pSeedSeq,
                               std::vector<std::pair<std::string, int>> pModelParameters = {}, bool pEnablePlotting = false) const;

private:
    std::shared_ptr<Logger> logger;     //The logger
};

#endif // SIMULATIONMANAGER_H
